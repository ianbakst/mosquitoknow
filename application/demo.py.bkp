#!/usr/local/intelpython3/bin/python
import numpy as np
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
import pickle
from darksky import forecast
from descartes import PolygonPatch
import geopandas as gpd
import pysal as ps
from matplotlib.patches import Polygon as mpl_Polygon
from matplotlib.collections import PatchCollection

def runmodel(input_date):
    date = (pd.to_datetime(input_date)).date()
    modelfilename = 'data/lin_model.sav'
    scalerfilename = 'data/lin_scaler.sav'
    lin = pickle.load(open(modelfilename, 'rb'))
    scaler = pickle.load(open(scalerfilename, 'rb'))
    testX = build_input(date)
    testx = testX[['TL1','Tmax','Tmin','lat','lon','sqrt_dw','sqrt_p']]
    X = scaler.transform(testx)
    Y = lin.predict(X)
    l= len(Y)
    for i in range(l):
        if Y[i] < 0:
            Y[i] = 0
    TT = Y.reshape(51,51).transpose()
    xx = np.linspace(min(testX['lon']),max(testX['lon']),51)
    yy = np.linspace(min(testX['lat']),max(testX['lat']),51)
    res = {'lat':xx,'lon':yy,'M':TT}
    map_plot(res)
    return

def bin_output(A,div=5):
    B = np.ceil(div*A)
    return B

def map_plot(res):
    xx = res['lon']
    yy = res['lat']
    M = res['M']
    plt.contourf(xx,yy,M,alpha=1.0,cmap='RdYlGn_r')
    plt.colorbar()
    plt.xlim(-87.85,-87.531)
    plt.ylim(41.635,42.02)
    plt.axis('equal')
    plt.savefig('flaskapp/static/map.png',dpi=200)
    plt.close()
    return

def get_weather(input_date):
    date = (pd.to_datetime(input_date)).date()
    dskey = '6864d54f724e54e7c3ae08094f523ff0'
    CHICAGO = dskey, 41.95, -87.80
    deltaT = (date - dt.date.today()).days
    prec = 0.0
    Tmax = 0.0
    Tmin = 100.0
    TH0 = 0.0
    TL1 = 0.0
    if deltaT > 0:
        fore_cast = forecast(*CHICAGO)
        TH0 = fore_cast.daily[deltaT].temperatureHigh
        TL1 = fore_cast.daily[deltaT-1].temperatureLow
        for i in range(deltaT):
            Tmax = max([fore_cast.daily[i].temperatureHigh, Tmax])
            Tmin = min([fore_cast.daily[i].temperatureLow, Tmin])
            prec += fore_cast.daily[i].precipIntensityMax
    elif deltaT == 0:
        fore_cast = forecast(*CHICAGO)
        TH0 = fore_cast.daily[deltaT].temperatureHigh
        Tmax = TH0
        Tmin = fore_cast.daily[deltaT].temperatureLow

    N = 10 - deltaT
    if N > 10:
        N = 10
    for i in range(N):
        bt = (dt.date.today() + pd.DateOffset(deltaT - i)).isoformat()
        backDay = forecast(*CHICAGO, time = bt)
        if deltaT <= 0:
            if i == 0:
                TH0 = backDay.daily[0].temperatureHigh
            elif i == 1:
                TL1 = backDay.daily[0].temperatureLow
        Tmax = max([Tmax,backDay.daily[0].temperatureHigh])
        Tmin = min([Tmin,backDay.daily[0].temperatureLow])
        prec += backDay.daily[0].precipIntensityMax
    A={}
    A['TH0']= TH0
    A['TL1']= TL1
    A['Tmax']= Tmax
    A['Tmin']= Tmin
    A['prec']= prec
    return A

def build_input(input_date):
    date = (pd.to_datetime(input_date)).date()
    A = get_weather(date)
    GD = pd.read_csv('data/gridpoints.csv')
    GD['sqrt_dw']=np.sqrt(GD['d_water'])
    GD['sqrt_p']=np.sqrt(GD['d_park'])
    GD['TH0'] = A['TH0']
    GD['TL1'] = A['TL1']
    GD['Tmax'] = A['Tmax']
    GD['Tmin'] = A['Tmin']
    GD['prec'] = A['prec']
    return GD
